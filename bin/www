// #!/usr/bin/env node

/**
 * Module dependencies.
 */

const init = require('..')
    , mongoose = require('../connection')
    , config = require('../config')
    , http = require('http')
    , {port} = config
    , debug = require('debug')('app:server')
    , serve = async () => {
	    const app = await init(await mongoose)
	        , server = http.createServer(app.callback())

	    /**
	     * Store port.
	     */

	    app.context.port = port

	    /**
	     * Listen on provided port, on all network interfaces.
	     */

	    server.listen(port)
	    server.on('error', onError)
	    server.on('listening', onListening)

	    /**
	     * Event listener for HTTP server "listening" event.
	     */

	    function onListening() {
		    const addr = server.address()
		        , bind = typeof addr === 'string'
		               ? 'pipe ' + addr
		               : 'port ' + addr.port
		    console.error('Listening on ' + bind)
	    }
    }

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

	const bind = ( typeof port === 'string'
	             ? 'Pipe '
	             : 'Port '
	             ) + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

serve()
.catch(debug)
